install.packages("lpSolve")
}
library(lpSolve)
# Define the cost of each type of ad
costs <- c(300, 800, 150)
# Define the reach of each type of ad
reach <- c(1750, 5120, 870)
# Define the total budget
total_budget <- 30000
# Define the constraint for the maximum number of ads
max_ads_ratio <- 0.70
# Define the decision variables for the number of each type of ad
# We need to maximize the reach
f.obj <- reach
# Define the constraints
# Constraint 1: Total cost should not exceed the budget
f.con <- matrix(c(300, 800, 150), nrow = 1)
# Right-hand side of the constraint
f.dir <- c("<=")
f.rhs <- c(total_budget)
# Add constraints for the maximum number of ads
# Each type of ad should not exceed 70% of the total number of ads
f.con <- rbind(f.con, c(1, 0, 0), c(0, 1, 0), c(0, 0, 1))
f.dir <- c(f.dir, "<=", "<=", "<=")
f.rhs <- c(f.rhs, max_ads_ratio * total_budget / min(costs))
# Solve the integer programming problem
result <- lp("max", f.obj, f.con, f.dir, f.rhs, all.int = TRUE)
# Print the solution
solution <- result$solution
names(solution) <- c("Radio", "TV", "Newspaper")
cat("Optimal number of ads for each type:\n")
print(solution)
cat("\nMaximum number of people reached:\n")
print(result$objval)
# Install and load lpSolve package
if (!requireNamespace("lpSolve", quietly = TRUE)) {
install.packages("lpSolve")
}
library(lpSolve)
# Define the cost of each type of ad
costs <- c(300, 800, 150)
# Define the reach of each type of ad
reach <- c(1750, 5120, 870)
# Define the total budget
total_budget <- 30000
# Define the constraints matrix
# Budget constraint
A <- rbind(costs,
c(1, 0, 0), c(0, 1, 0), c(0, 0, 1),     # Individual constraints
c(1, 1, 1))                           # Total ads constraint
# Right-hand side of the constraints
b <- c(total_budget,
0.7 * total_budget / costs[1], 0.7 * total_budget / costs[2], 0.7 * total_budget / costs[3],
70)                                      # Adjusting the maximum ads constraint to be 70
# Direction of the constraints
dir <- c("<=",
"<=", "<=", "<=",
"<=")
# Solve the integer programming problem
# Install and load lpSolve package
if (!requireNamespace("lpSolve", quietly = TRUE)) {
install.packages("lpSolve")
}
library(lpSolve)
# Define the cost of each type of ad
costs <- c(300, 800, 150)
# Define the reach of each type of ad
reach <- c(1750, 5120, 870)
# Define the total budget
total_budget <- 30000
# Define the constraints matrix
# Budget constraint
A <- rbind(costs,
c(1, 0, 0), c(0, 1, 0), c(0, 0, 1),     # Individual constraints
c(1, 1, 1))                           # Total ads constraint
# Right-hand side of the constraints
b <- c(total_budget,
0.7 * total_budget / costs[1], 0.7 * total_budget / costs[2], 0.7 * total_budget / costs[3],
70)                                      # Adjusting the maximum ads constraint to be 70
# Direction of the constraints
dir <- c("<=",
"<=", "<=", "<=",
"<=")
# Solve the integer programming problem
result <- lp("max", reach, A, dir, b, all.int = TRUE)
# Print the solution
solution <- result$solution
names(solution) <- c("Radio", "TV", "Newspaper")
cat("Optimal number of ads for each type:\n")
print(solution)
cat("\nMaximum number of people reached:\n")
print(result$objval)
# Define the cost function
cost_function <- function(v) {
0.6 * v^2 + 50000 / v^2
}
# Define the derivative of the cost function
cost_function_derivative <- function(v) {
1.2 * v - 100000 / v^3
}
# Use the optimize function to find the minimum value
result <- optimize(cost_function, interval = c(1, 100), tol = .Machine$double.eps)
# Print the optimal value of v
cat("The specific value of v that yields a minimum total cost is:", round(result$minimum), "\n")
cat("The minimum total cost is:", result$objective, "\n")
# Define the cost function
cost_function <- function(v) {
0.6 * v^2 + 50000 / v^2
}
# Define the derivative of the cost function
cost_function_derivative <- function(v) {
1.2 * v - 100000 / v^3
}
# Use the optimize function to find the minimum value
result <- optimize(cost_function, interval = c(1, 100), tol = .Machine$double.eps)
# Print the optimal value of v
cat("The specific value of v that yields a minimum total cost is:", round(result$minimum), "\n")
cat("The minimum total cost is:", round(result$objective), "\n")
# Install and load quadprog package
if (!requireNamespace("quadprog", quietly = TRUE)) {
install.packages("quadprog")
}
library(quadprog)
# Define the matrices for the quadratic programming problem
Dmat <- matrix(c(4, -1, -1, 2), nrow = 2, byrow = TRUE)  # Coefficients for the quadratic terms
dvec <- c(2, 1)  # Coefficients for the linear terms
# Constraint matrices
Amat <- matrix(c(2, 1,  # Constraint 1: 2x1 + 3x2 >= 10
3, 1,  # Constraint 2: x1 + x2 >= 5
1, 1,  # Constraint 3: x1 >= 0 (implicit)
0, 1), nrow = 2, byrow = TRUE)  # Constraint 4: x2 >= 0 (implicit)
bvec <- c(10, 5)
# Solve the quadratic programming problem
result <- solve.QP(Dmat, dvec, t(Amat), bvec, meq = 0)
# Install and load quadprog package
if (!requireNamespace("quadprog", quietly = TRUE)) {
install.packages("quadprog")
}
library(quadprog)
# Define the matrices for the quadratic programming problem
Dmat <- matrix(c(4, -1, -1, 2), nrow = 2, byrow = TRUE)  # Coefficients for the quadratic terms
dvec <- c(2, 1)  # Coefficients for the linear terms
# Constraint matrices
Amat <- matrix(c(2, 3,  # Coefficients for 2x1 + 3x2 >= 10
1, 1), nrow = 2, byrow = TRUE)  # Coefficients for x1 + x2 >= 5
bvec <- c(10, 5)
# Define non-negativity constraints separately
non_negativity <- diag(2)
Amat <- cbind(Amat, non_negativity)
bvec <- c(bvec, 0, 0)
# Solve the quadratic programming problem
result <- solve.QP(Dmat, dvec, t(Amat), bvec, meq = 0)
# Install and load quadprog package
if (!requireNamespace("quadprog", quietly = TRUE)) {
install.packages("quadprog")
}
library(quadprog)
# Define the matrices for the quadratic programming problem
Dmat <- matrix(c(4, -1, -1, 2), nrow = 2, byrow = TRUE)  # Coefficients for the quadratic terms
dvec <- c(2, 1)  # Coefficients for the linear terms
# Constraint matrices
Amat <- matrix(c(2, 3,  # Coefficients for 2x1 + 3x2 >= 10
1, 1,  # Coefficients for x1 + x2 >= 5
1, 0,  # Coefficients for x1 >= 0
0, 1), nrow = 2, byrow = TRUE)  # Coefficients for x2 >= 0
Amat <- t(Amat)
bvec <- c(10, 5, 0, 0)
# Solve the quadratic programming problem
result <- solve.QP(Dmat, dvec, Amat, bvec, meq = 0)
# Install and load lpSolve package
if (!requireNamespace("lpSolve", quietly = TRUE)) {
install.packages("lpSolve")
}
library(lpSolve)
# Objective function coefficients (example)
objective <- c(1, 2, 3)  # Just an example, you can adjust it as needed
# Constraint matrix (including the business rule constraint)
# Here we are adding the constraint x2 - 0.5*x1 - 0.5*x3 <= 0
constraints <- matrix(c(1, -0.5, -0.5,  # x2 - 0.5*x1 - 0.5*x3
1,  1,    1),  # Example constraint: x1 + x2 + x3 <= 100 (total production limit)
nrow = 2, byrow = TRUE)
# Right-hand side of the constraints
rhs <- c(0, 100)  # Adjust the RHS values as needed
# Direction of the constraints
directions <- c("<=", "<=")
# Solve the linear programming problem
result <- lp("max", objective, constraints, directions, rhs, compute.sens = TRUE)
# Print the optimal solution
solution <- result$solution
names(solution) <- c("x1", "x2", "x3")
cat("Optimal values of x1, x2, and x3:\n")
print(solution)
cat("\nObjective function value:\n")
print(result$objval)
# Install and load the quadprog package if not already installed
if (!requireNamespace("quadprog", quietly = TRUE)) {
install.packages("quadprog")
}
library(quadprog)
# Define the quadratic coefficients matrix
Dmat <- matrix(c(2, -1.5, -1.5, 4), nrow = 2, byrow = TRUE)
# Define the linear coefficients vector
dvec <- c(2, 1)
# Define the constraints matrix
Amat <- matrix(c(-3, -1,  # 3x1 + 2x2 >= 10  -->  -3x1 - 2x2 <= -10
-2, -1,  # x1 + x2 >= 4     -->  -x1 - x2 <= -4
1,  0,  # x1 >= 0
0,  1), # x2 >= 0
nrow = 2)
# Define the right-hand side vector
bvec <- c(-10, -4, 0, 0)
# Solve the quadratic programming problem
result <- solve.QP(Dmat, dvec, t(Amat), bvec, meq = 0)
# Install and load the lpSolve package
install.packages("lpSolve")
install.packages("lpSolve")
library(lpSolve)
# Define the item names and their weights in kilograms
items <- c("towel", "jacket", "book1", "book2", "underwear",
"soap_shampoo", "shoes", "pants1", "pants2",
"shirt1", "shirt2", "snickers1", "snickers2")
weights <- c(0.3, 0.9, 0.6, 0.5, 0.5, 1.2, 0.7, 0.4, 0.5, 0.3, 0.3, 0.5, 0.5)
# Define the coefficient matrix for the constraints (weight <= 5)
A <- matrix(weights, nrow = 1)  # A single row matrix for the weight constraint
# Define the constraint vector (right-hand side of the weight constraint)
b <- 5
# Define the objective function (maximize the number of items)
obj <- rep(1, length(weights))  # Coefficients of the objective function (1 for each item)
# Define the direction of the optimization (maximization problem)
const.dir <- "max"
# Solve the integer linear programming problem
lp_solution <- lp(direction = const.dir, objective.in = obj, const.mat = A, const.dir = "<=", const.rhs = b, all.int = TRUE)
# Extract and print the optimal number of items
optimal_items <- sum(lp_solution$solution)
print(optimal_items)
# Install and load the lpSolve package
install.packages("lpSolve")
install.packages("lpSolve")
library(lpSolve)
# Define the item names and their weights in kilograms
items <- c("towel", "jacket", "book1", "book2", "underwear",
"soap_shampoo", "shoes", "pants1", "pants2",
"shirt1", "shirt2", "snickers1", "snickers2")
weights <- c(0.3, 0.9, 0.6, 0.5, 0.5, 1.2, 0.7, 0.4, 0.5, 0.3, 0.3, 0.5, 0.5)
# Define the coefficient matrix for the constraints (weight <= 5)
A <- matrix(weights, nrow = 1)  # A single row matrix for the weight constraint
# Define the constraint vector (right-hand side of the weight constraint)
b <- 5
# Define the objective function (maximize the number of items)
obj <- rep(1, length(weights))  # Coefficients of the objective function (1 for each item)
# Define the direction of the optimization (maximization problem)
const.dir <- "max"
# Solve the integer linear programming problem
lp_solution <- lp(direction = const.dir, objective.in = obj, const.mat = A, const.dir = "<=", const.rhs = b, all.int = TRUE)
# Extract and print the optimal number of items
optimal_items <- sum(lp_solution$solution)
print(optimal_items)
# Install and load the lpSolve package
install.packages("lpSolve")
install.packages("lpSolve")
library(lpSolve)
# Define objective coefficients (annual returns)
obj <- c(0.205, 0.22, 0.215)
# Define constraint matrix and right-hand side
A <- matrix(c(1, 1, 1, 0, -0.25, 1, 1, -0.5), nrow = 3, byrow = TRUE)
rhs <- c(19500, 0, 0)
# Solve the LP problem
lp_solution <- lp("max", obj, A, "<=", rhs, all.int = TRUE)
# Extract optimal solution and optimal return
optimal_investment <- lp_solution$solution
optimal_return <- sum(optimal_investment * obj)
# Print optimal solution and return
print(optimal_investment)
print(optimal_return)
# Update the RHS for total investment constraint to 19500
rhs_new <- c(19500 + 1000, 0, 0)
# Solve the LP problem with the increased investment range
lp_solution_new <- lp("max", obj, A, "<=", rhs_new, all.int = TRUE)
# Extract optimal solution and optimal return with the increased investment
optimal_investment_new <- lp_solution_new$solution
optimal_return_new <- sum(optimal_investment_new * obj)
# Calculate the contribution of the additional $1000 investment
additional_contribution <- optimal_return_new - optimal_return
# Print the contribution rounded to the nearest whole number
print(round(additional_contribution))
# Define objective coefficients (annual returns as decimals)
returns <- c(0.205, 0.22, 0.215)
# Define the constraint matrix (coefficients of x1, x2, x3)
A <- matrix(c(1, 1, 1, 0, -0.25, 1, 1, -0.5), nrow = 3, byrow = TRUE)
# Define the right-hand side of constraints (investment limits)
rhs <- c(19500, 0, 0)  # 19500 is the upper limit initially
# Solve the LP problem initially
lp_solution <- lp("max", returns, A, "<=", rhs, all.int = TRUE)
# Extract optimal investment amounts and optimal return initially
optimal_investment_initial <- lp_solution$solution
optimal_return_initial <- sum(optimal_investment_initial * returns)
# Print optimal investment amounts and optimal return initially
print("Optimal Investment Amounts (Initial):")
print(optimal_investment_initial)
print("Optimal Annual Return (Initial):")
print(optimal_return_initial)
# Update the RHS for total investment constraint to 19500 + 1000 = 20500
rhs_new <- c(20500, 0, 0)
# Solve the LP problem with the increased investment range
lp_solution_new <- lp("max", returns, A, "<=", rhs_new, all.int = TRUE)
# Extract optimal investment amounts and optimal return with the increased investment
optimal_investment_new <- lp_solution_new$solution
optimal_return_new <- sum(optimal_investment_new * returns)
# Calculate the contribution of the additional $1000 investment
additional_contribution <- optimal_return_new - optimal_return_initial
# Print the optimal investment amounts and optimal return with the increased investment
print("Optimal Investment Amounts (With Additional $1000):")
print(optimal_investment_new)
print("Optimal Annual Return (With Additional $1000):")
print(optimal_return_new)
# Print the contribution of the additional $1000 investment to the optimal return
print("Contribution of Additional $1000 Investment to Optimal Return:")
print(round(additional_contribution))
# Define the value of interest
threshold <- 1/9
# Calculate the area where |X - Y| <= threshold
area_within <- threshold^2
# Probability that |X - Y| > threshold
probability_greater_than <- 1 - area_within
# Round to the nearest hundredth
probability_rounded <- round(probability_greater_than, 2)
# Print the result
probability_rounded
# Given parameters
N <- 152  # total population
K <- 44   # number of tagged lions
n <- 7    # sample size
# Probability of at least one tagged lion
prob_at_least_one <- 1 - phyper(0, K, N - K, n)
# Round to 2 decimal places
prob_rounded <- round(prob_at_least_one, 2)
# Print the result
prob_rounded
# Given parameters
shape <- 4
rate <- 0.3
# Calculate the third quartile (Q3) of the Gamma distribution
q3 <- qgamma(0.75, shape = shape, rate = rate)
# Round to one decimal place
q3_rounded <- round(q3, 1)
# Print the result
q3_rounded
# Given parameters
min_demand <- 5.65  # in million gallons
mode_demand <- 6.55 # mode of the distribution in million gallons
max_demand <- 6.75  # in million gallons
shortage_prob <- 0.06  # probability of shortage
# Calculate the import quantity to meet the requirement
import_quantity <- qtriang(1 - shortage_prob, min = min_demand, mode = mode_demand, max = max_demand)
# Round to two decimal places
import_quantity_rounded <- round(import_quantity, 2)
# Given parameters
min_demand <- 5.65  # in million gallons
mode_demand <- 6.55 # mode of the distribution in million gallons
max_demand <- 6.75  # in million gallons
shortage_prob <- 0.06  # probability of shortage
# Calculate the import quantity to meet the requirement
import_quantity <- min_demand + sqrt(shortage_prob * (max_demand - min_demand) * (mode_demand - min_demand))
# Round to two decimal places
import_quantity_rounded <- round(import_quantity, 2)
# Print the result
import_quantity_rounded
# Given observed frequencies
observed <- c(55, 220, 400, 370, 130, 25)
# Binomial parameters
n <- 5
p <- 0.45
# Expected frequencies under Binomial distribution
expected <- dbinom(0:5, size = n, prob = p) * sum(observed)
# Calculate Chi-squared statistic
chi_squared <- sum((observed - expected)^2 / expected)
# Degrees of freedom
df <- length(observed) - 1 - 2  # n - 1 - k parameters (n=5, p=1)
# Calculate p-value
p_value <- pchisq(chi_squared, df, lower.tail = FALSE)
# Round p-value to two decimal places
p_value_rounded <- round(p_value, 2)
# Print the results
cat("Chi-squared statistic:", chi_squared, "\n")
cat("Degrees of freedom:", df, "\n")
cat("P-value:", p_value_rounded, "\n")
# Decision based on significance level 0.05
if (p_value < 0.05) {
cat("Reject the null hypothesis: The device's random number generation is not appropriate.\n")
} else {
cat("Do not reject the null hypothesis: The device's random number generation is appropriate.\n")
}
# Given parameters
fixed_cost <- 1000000
variable_cost <- 21575
min_price <- 23550
max_price <- 25650
desired_profit <- 1500000
# Function to calculate total revenue for a given number of automobiles sold
calculate_total_revenue <- function(x) {
price <- runif(x, min = min_price, max = max_price)
total_revenue <- sum(price)
return(total_revenue)
}
# Find the estimated number of automobiles needed
estimated_x <- 0
current_profit <- 0
while (current_profit < desired_profit) {
estimated_x <- estimated_x + 1
total_revenue <- calculate_total_revenue(estimated_x)
total_costs <- fixed_cost + variable_cost * estimated_x
current_profit <- total_revenue - total_costs
}
# Print the estimated number of automobiles
cat("Estimated number of automobiles:", estimated_x, "\n")
# Define the time series data
period <- 1:5
value <- c(34.65, 34.32, 31.59, 38.59, 34.87)
# Define alpha
alpha <- 0.25
# Initialize vectors to store forecasts and actual values
forecast <- numeric(length = length(value) + 1)
actual <- c(value, NA)  # Assuming period 6 value is missing (replace NA with actual value)
# Perform exponential smoothing
forecast[1] <- value[1]  # Initial forecast is the first observed value
for (i in 2:length(value)) {
forecast[i] <- alpha * value[i-1] + (1 - alpha) * forecast[i-1]
}
# Forecast for period 6
forecast[length(value) + 1] <- alpha * value[length(value)] + (1 - alpha) * forecast[length(value)]
# Calculate RMSE
rmse <- sqrt(mean((actual - forecast)^2, na.rm = TRUE))
# Round RMSE to the nearest tenth
rmse_rounded <- round(rmse, 1)
# Print the rounded RMSE
print(rmse_rounded)
# Given data
period <- c(1, 2, 3, 4, 5)
value <- c(34.65, 34.32, 31.59, 38.59, 34.87)
alpha <- 0.25
# Exponential smoothing function
exponential_smoothing <- function(y, alpha) {
F <- numeric(length(y))
F[1] <- y[1]  # initial forecast is the first actual value
for (i in 2:length(y)) {
F[i] <- alpha * y[i] + (1 - alpha) * F[i-1]
}
return(F)
}
# Forecast for period 6 using exponential smoothing
F_6 <- exponential_smoothing(value, alpha)[length(value)]
# Actual value for period 6 (hypothetical or future value)
# Replace with actual data if available
actual_value_6 <- NA  # replace NA with the actual value if known
# Calculate MAPE
MAPE <- function(actual, forecast) {
abs_percent_error <- abs((actual - forecast) / actual) * 100
mape <- mean(abs_percent_error, na.rm = TRUE)
return(mape)
}
# Calculate MAPE for period 6
mape_value <- MAPE(actual_value_6, F_6)
# Round MAPE to the nearest percent
mape_rounded <- round(mape_value)
# Print the result
cat("MAPE for the forecast of period 6 (rounded to the nearest percent):", mape_rounded, "%\n")
# Given data
period <- c(1, 2, 3, 4, 5)
value <- c(34.65, 34.32, 31.59, 38.59, 34.87)
alpha <- 0.25
# Exponential smoothing function
exponential_smoothing <- function(y, alpha) {
F <- numeric(length(y))
F[1] <- y[1]  # initial forecast is the first actual value
for (i in 2:length(y)) {
F[i] <- alpha * y[i] + (1 - alpha) * F[i-1]
}
return(F)
}
# Forecast for period 6 using exponential smoothing
F_6 <- exponential_smoothing(value, alpha)[length(value)]
# Actual value for period 6 (hypothetical or future value)
# Replace with actual data if available
actual_value_6 <- NA  # Replace NA with the actual value if known
# Calculate MAPE
MAPE <- function(actual, forecast) {
if (is.na(actual)) {
return(NA)  # Return NA if actual value is not available
} else {
abs_percent_error <- abs((actual - forecast) / actual) * 100
mape <- mean(abs_percent_error, na.rm = TRUE)
return(mape)
}
}
# Calculate MAPE for period 6
mape_value <- MAPE(actual_value_6, F_6)
# Round MAPE to the nearest percent
mape_rounded <- round(mape_value)
# Print the result
cat("MAPE for the forecast of period 6 (rounded to the nearest percent):", mape_rounded, "%\n")
# Given data
actual_values <- c(34.65, 34.32, 31.59, 38.59, 34.87)
alpha <- 0.25  # Exponential smoothing parameter
forecast_period_6 <- alpha * actual_values[length(actual_values)] + (1 - alpha) * actual_values[length(actual_values) - 1]
# Compute absolute percentage error for each period
APE <- abs((forecast_period_6 - actual_values[length(actual_values)]) / actual_values[length(actual_values)]) * 100
# Compute MAPE
MAPE <- mean(APE)
# Round MAPE to the nearest percent
MAPE_rounded <- round(MAPE)
# Print the rounded MAPE
cat("The MAPE of the forecast, rounded to the nearest percent, is:", MAPE_rounded, "%\n")
